package Hewwwe.entity;

import Hewwwe.entity.enums.Rol;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.Entity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import jakarta.persistence.Column;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Entity representing a user in the system.
 * This class stores user authentication information, profile data, and relationships to other entities.
 * Users can have products, addresses, a shopping cart, exchanges, and invoices associated with them.
 * The user can have either a USER or ADMIN role which determines their access rights.
 */
@Entity
@Table(name = "user")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class User {
    /**
     * Unique identifier for the user.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;
    
    /**
     * Full name of the user.
     */
    private String name;
    
    /**
     * Email address of the user.
     */
    private String email;
    
    /**
     * Phone number of the user.
     */
    private String phone;
    
    /**
     * Role of the user (USER or ADMIN).
     * Determines access rights within the application.
     */
    @Enumerated(EnumType.STRING)
    private Rol role;
    
    /**
     * Date when the user registered in the system.
     */
    private Date registrationDate;
    
    /**
     * Encrypted password of the user.
     * Excluded from JSON serialization for security.
     */
    @JsonIgnore
    private String password;
    
    /**
     * Unique username for the user.
     * Used for authentication.
     */
    @Column(unique = true)
    private String username;
    
    /**
     * Flag indicating if the user account is active.
     * Inactive accounts cannot log in.
     */
    private boolean isActive = true;
    
    /**
     * Date of the user's last login.
     */
    private Date lastLoginDate;

    /**
     * Relationships with other entities
     */
    
    /**
     * User's shopping cart.
     * One-to-one relationship where each user has one cart.
     * The cart is automatically removed if the user is deleted.
     */
    @JsonIgnore
    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Cart cart;

    /**
     * User's shipping/billing addresses.
     * One-to-many relationship where a user can have multiple addresses.
     * Addresses are automatically removed if the user is deleted.
     */
    @JsonIgnore
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<Address> addresses = new HashSet<>();

    /**
     * Products listed by the user.
     * One-to-many relationship where a user can list multiple products for sale.
     * Products are automatically removed if the user is deleted.
     */
    @JsonIgnore
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<Product> products = new HashSet<>();

    /**
     * Exchanges where the user is the requester (initiated the exchange).
     * One-to-many relationship tracking exchanges requested by this user.
     * Exchanges are automatically removed if the user is deleted.
     */
    @JsonIgnore
    @OneToMany(mappedBy = "requester", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Exchange> requestedExchanges = new ArrayList<>();

    /**
     * Exchanges where the user is the owner (received exchange requests).
     * One-to-many relationship tracking exchanges where this user owns the requested products.
     * Exchanges are automatically removed if the user is deleted.
     */
    @JsonIgnore
    @OneToMany(mappedBy = "owner", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Exchange> ownedExchanges = new ArrayList<>();

    /**
     * Invoices associated with the user's purchases.
     * One-to-many relationship tracking all user transactions.
     * Invoices are automatically removed if the user is deleted.
     */
    @JsonIgnore
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Invoice> invoices = new ArrayList<>();
}
