package Hewwwe.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Entity representing a product in the system.
 * This class stores product information for items that users can sell or exchange.
 * Products can be associated with users, categories, carts, exchanges, and invoices.
 * Products have various states (available, sold, reserved) throughout their lifecycle.
 */
@Entity
@Table(name = "product")
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Product {

    /**
     * Unique identifier for the product.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long productId;
    
    /**
     * Name of the product.
     */
    private String name;
    
    /**
     * Detailed description of the product.
     */
    private String description;
    
    /**
     * Price of the product in the system's currency.
     */
    private Double price;
    
    /**
     * URL or path to the product's image.
     */
    private String image;
    
    /**
     * Size of the product (clothing size, dimensions, etc.).
     */
    private String size;
    
    /**
     * Current status of the product (AVAILABLE, SOLD, RESERVED).
     */
    private String status;
    
    /**
     * Date when the product was published/listed for sale.
     */
    private Date publicationDate;

    /**
     * Relationships with other entities
     */
    
    /**
     * User who owns/sells this product.
     * Many-to-one relationship where many products can belong to one user.
     */
    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    /**
     * Category to which this product belongs.
     * Many-to-one relationship where many products can belong to one category.
     */
    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "category_id", nullable = false)
    private Category category;

    /**
     * Cart in which this product may be placed.
     * Many-to-one relationship where many products can be in one cart.
     * This is null if the product is not in any cart.
     */
    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "cart_id")
    private Cart cart;
    
    /**
     * Exchanges in which this product is involved.
     * Many-to-many relationship where products can be part of multiple exchanges.
     */
    @JsonIgnore
    @ManyToMany(mappedBy = "products")
    private List<Exchange> exchanges = new ArrayList<>();

    /**
     * Invoice to which this product is associated when sold.
     * Many-to-one relationship where many products can be part of one invoice.
     * This is null if the product has not been sold/invoiced.
     */
    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "invoice_id")
    private Invoice invoice;
}
